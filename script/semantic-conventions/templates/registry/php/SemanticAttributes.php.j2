{% import 'common.j2' as c %}
{%- set my_class_name = ctx.root_namespace | pascal_case ~ ("Incubating" if ctx.incubating ) ~ "Attributes" -%}
<?php

// DO NOT EDIT, this is an Auto-generated file from script/semantic-conventions

declare(strict_types=1);

namespace {{ ctx.namespace }};

/**
 * Semantic attributes and corresponding values for {{ ctx.root_namespace }}.
 * @see https://opentelemetry.io/docs/specs/semconv/registry/attributes/{{ ctx.root_namespace }}/
{% if ctx.incubating %}
 * May contain @experimental Semantic Conventions which may change or be removed in the future.
{% endif %}
 */
interface {{ my_class_name }}
{
{% for attribute in ctx.attributes | rejectattr("name", "in", ctx.excluded_attributes) if not (attribute is deprecated) %}
{%- set stability_phpdoc = c.stability(attribute) -%}
{{ [attribute.brief, concat_if(attribute.note), stability_phpdoc] | comment(indent=4)  | replace(' \n', '\n') }}
    public const {{ c.attribute_name(attribute) }} = '{{ attribute.name }}';

    {% if attribute is enum %}{% for member in attribute.type.members if not (member is deprecated) %}
        {%- set stability_phpdoc = c.stability(attribute) -%}
{{ [member.brief, stability_phpdoc] | comment(indent=4)}}
    public const {{ c.attribute_value_name(attribute, member) }} = {{ member.value | print_member_value | replace('"', "'") }};

    {% endfor %}{% endif %}
{% endfor %}
}
{# blank line #}