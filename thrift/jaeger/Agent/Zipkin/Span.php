<?php
namespace Jaeger\Thrift\Agent\Zipkin;

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * A trace is a series of spans (often RPC calls) which form a latency tree.
 * 
 * The root span is where trace_id = id and parent_id = Nil. The root span is
 * usually the longest interval in the trace, starting with a SERVER_RECV
 * annotation and ending with a SERVER_SEND.
 */
class Span
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'trace_id',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        5 => array(
            'var' => 'parent_id',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        6 => array(
            'var' => 'annotations',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Jaeger\Thrift\Agent\Zipkin\Annotation',
                ),
        ),
        8 => array(
            'var' => 'binary_annotations',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Jaeger\Thrift\Agent\Zipkin\BinaryAnnotation',
                ),
        ),
        9 => array(
            'var' => 'debug',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        10 => array(
            'var' => 'timestamp',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        11 => array(
            'var' => 'duration',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        12 => array(
            'var' => 'trace_id_high',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var int
     */
    public $trace_id = null;
    /**
     * Span name in lowercase, rpc method for example
     * 
     * Conventionally, when the span name isn't known, name = "unknown".
     * 
     * @var string
     */
    public $name = null;
    /**
     * @var int
     */
    public $id = null;
    /**
     * @var int
     */
    public $parent_id = null;
    /**
     * @var \Jaeger\Thrift\Agent\Zipkin\Annotation[]
     */
    public $annotations = null;
    /**
     * @var \Jaeger\Thrift\Agent\Zipkin\BinaryAnnotation[]
     */
    public $binary_annotations = null;
    /**
     * @var bool
     */
    public $debug = false;
    /**
     * Microseconds from epoch of the creation of this span.
     * 
     * This value should be set directly by instrumentation, using the most
     * precise value possible. For example, gettimeofday or syncing nanoTime
     * against a tick of currentTimeMillis.
     * 
     * For compatibility with instrumentation that precede this field, collectors
     * or span stores can derive this via Annotation.timestamp.
     * For example, SERVER_RECV.timestamp or CLIENT_SEND.timestamp.
     * 
     * This field is optional for compatibility with old data: first-party span
     * stores are expected to support this at time of introduction.
     * 
     * @var int
     */
    public $timestamp = null;
    /**
     * Measurement of duration in microseconds, used to support queries.
     * 
     * This value should be set directly, where possible. Doing so encourages
     * precise measurement decoupled from problems of clocks, such as skew or NTP
     * updates causing time to move backwards.
     * 
     * For compatibility with instrumentation that precede this field, collectors
     * or span stores can derive this by subtracting Annotation.timestamp.
     * For example, SERVER_SEND.timestamp - SERVER_RECV.timestamp.
     * 
     * If this field is persisted as unset, zipkin will continue to work, except
     * duration query support will be implementation-specific. Similarly, setting
     * this field non-atomically is implementation-specific.
     * 
     * This field is i64 vs i32 to support spans longer than 35 minutes.
     * 
     * @var int
     */
    public $duration = null;
    /**
     * Optional unique 8-byte additional identifier for a trace. If non zero, this
     * means the trace uses 128 bit traceIds instead of 64 bit.
     * 
     * @var int
     */
    public $trace_id_high = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['trace_id'])) {
                $this->trace_id = $vals['trace_id'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['parent_id'])) {
                $this->parent_id = $vals['parent_id'];
            }
            if (isset($vals['annotations'])) {
                $this->annotations = $vals['annotations'];
            }
            if (isset($vals['binary_annotations'])) {
                $this->binary_annotations = $vals['binary_annotations'];
            }
            if (isset($vals['debug'])) {
                $this->debug = $vals['debug'];
            }
            if (isset($vals['timestamp'])) {
                $this->timestamp = $vals['timestamp'];
            }
            if (isset($vals['duration'])) {
                $this->duration = $vals['duration'];
            }
            if (isset($vals['trace_id_high'])) {
                $this->trace_id_high = $vals['trace_id_high'];
            }
        }
    }

    public function getName()
    {
        return 'Span';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->trace_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->parent_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::LST) {
                        $this->annotations = array();
                        $_size0 = 0;
                        $_etype3 = 0;
                        $xfer += $input->readListBegin($_etype3, $_size0);
                        for ($_i4 = 0; $_i4 < $_size0; ++$_i4) {
                            $elem5 = null;
                            $elem5 = new \Jaeger\Thrift\Agent\Zipkin\Annotation();
                            $xfer += $elem5->read($input);
                            $this->annotations []= $elem5;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::LST) {
                        $this->binary_annotations = array();
                        $_size6 = 0;
                        $_etype9 = 0;
                        $xfer += $input->readListBegin($_etype9, $_size6);
                        for ($_i10 = 0; $_i10 < $_size6; ++$_i10) {
                            $elem11 = null;
                            $elem11 = new \Jaeger\Thrift\Agent\Zipkin\BinaryAnnotation();
                            $xfer += $elem11->read($input);
                            $this->binary_annotations []= $elem11;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->debug);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->timestamp);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->duration);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->trace_id_high);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Span');
        if ($this->trace_id !== null) {
            $xfer += $output->writeFieldBegin('trace_id', TType::I64, 1);
            $xfer += $output->writeI64($this->trace_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::I64, 4);
            $xfer += $output->writeI64($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->parent_id !== null) {
            $xfer += $output->writeFieldBegin('parent_id', TType::I64, 5);
            $xfer += $output->writeI64($this->parent_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->annotations !== null) {
            if (!is_array($this->annotations)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('annotations', TType::LST, 6);
            $output->writeListBegin(TType::STRUCT, count($this->annotations));
            foreach ($this->annotations as $iter12) {
                $xfer += $iter12->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->binary_annotations !== null) {
            if (!is_array($this->binary_annotations)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('binary_annotations', TType::LST, 8);
            $output->writeListBegin(TType::STRUCT, count($this->binary_annotations));
            foreach ($this->binary_annotations as $iter13) {
                $xfer += $iter13->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->debug !== null) {
            $xfer += $output->writeFieldBegin('debug', TType::BOOL, 9);
            $xfer += $output->writeBool($this->debug);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timestamp !== null) {
            $xfer += $output->writeFieldBegin('timestamp', TType::I64, 10);
            $xfer += $output->writeI64($this->timestamp);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->duration !== null) {
            $xfer += $output->writeFieldBegin('duration', TType::I64, 11);
            $xfer += $output->writeI64($this->duration);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->trace_id_high !== null) {
            $xfer += $output->writeFieldBegin('trace_id_high', TType::I64, 12);
            $xfer += $output->writeI64($this->trace_id_high);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
