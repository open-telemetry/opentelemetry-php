<?php
namespace Jaeger\Thrift;

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Tag
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'key',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'vType',
            'isRequired' => true,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'vStr',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'vDouble',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        5 => array(
            'var' => 'vBool',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        6 => array(
            'var' => 'vLong',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        7 => array(
            'var' => 'vBinary',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $key = null;
    /**
     * @var int
     */
    public $vType = null;
    /**
     * @var string
     */
    public $vStr = null;
    /**
     * @var double
     */
    public $vDouble = null;
    /**
     * @var bool
     */
    public $vBool = null;
    /**
     * @var int
     */
    public $vLong = null;
    /**
     * @var string
     */
    public $vBinary = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['key'])) {
                $this->key = $vals['key'];
            }
            if (isset($vals['vType'])) {
                $this->vType = $vals['vType'];
            }
            if (isset($vals['vStr'])) {
                $this->vStr = $vals['vStr'];
            }
            if (isset($vals['vDouble'])) {
                $this->vDouble = $vals['vDouble'];
            }
            if (isset($vals['vBool'])) {
                $this->vBool = $vals['vBool'];
            }
            if (isset($vals['vLong'])) {
                $this->vLong = $vals['vLong'];
            }
            if (isset($vals['vBinary'])) {
                $this->vBinary = $vals['vBinary'];
            }
        }
    }

    public function getName()
    {
        return 'Tag';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->key);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->vType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->vStr);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->vDouble);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->vBool);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->vLong);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->vBinary);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Tag');
        if ($this->key !== null) {
            $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
            $xfer += $output->writeString($this->key);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->vType !== null) {
            $xfer += $output->writeFieldBegin('vType', TType::I32, 2);
            $xfer += $output->writeI32($this->vType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->vStr !== null) {
            $xfer += $output->writeFieldBegin('vStr', TType::STRING, 3);
            $xfer += $output->writeString($this->vStr);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->vDouble !== null) {
            $xfer += $output->writeFieldBegin('vDouble', TType::DOUBLE, 4);
            $xfer += $output->writeDouble($this->vDouble);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->vBool !== null) {
            $xfer += $output->writeFieldBegin('vBool', TType::BOOL, 5);
            $xfer += $output->writeBool($this->vBool);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->vLong !== null) {
            $xfer += $output->writeFieldBegin('vLong', TType::I64, 6);
            $xfer += $output->writeI64($this->vLong);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->vBinary !== null) {
            $xfer += $output->writeFieldBegin('vBinary', TType::STRING, 7);
            $xfer += $output->writeString($this->vBinary);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
