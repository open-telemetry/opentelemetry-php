<?php
namespace Jaeger\Thrift\Crossdock;

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Downstream extends TBase
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'serviceName',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'serverRole',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'host',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'port',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'transport',
            'isRequired' => true,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'downstream',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Jaeger\Thrift\Crossdock\Downstream',
        ),
    );

    /**
     * @var string
     */
    public $serviceName = null;
    /**
     * @var string
     */
    public $serverRole = null;
    /**
     * @var string
     */
    public $host = null;
    /**
     * @var string
     */
    public $port = null;
    /**
     * @var int
     */
    public $transport = null;
    /**
     * @var \Jaeger\Thrift\Crossdock\Downstream
     */
    public $downstream = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            parent::__construct(self::$_TSPEC, $vals);
        }
    }

    public function getName()
    {
        return 'Downstream';
    }


    public function read($input)
    {
        return $this->_read('Downstream', self::$_TSPEC, $input);
    }


    public function write($output)
    {
        return $this->_write('Downstream', self::$_TSPEC, $output);
    }

}
