<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: opentelemetry/proto/logs/v1/logs.proto

namespace Opentelemetry\Proto\Logs\V1;

use UnexpectedValueException;

/**
 * Masks for LogRecord.flags field.
 *
 * Protobuf type <code>opentelemetry.proto.logs.v1.LogRecordFlags</code>
 */
class LogRecordFlags
{
    /**
     * Generated from protobuf enum <code>LOG_RECORD_FLAG_UNSPECIFIED = 0;</code>
     */
    const LOG_RECORD_FLAG_UNSPECIFIED = 0;
    /**
     * Generated from protobuf enum <code>LOG_RECORD_FLAG_TRACE_FLAGS_MASK = 255;</code>
     */
    const LOG_RECORD_FLAG_TRACE_FLAGS_MASK = 255;

    private static $valueToName = [
        self::LOG_RECORD_FLAG_UNSPECIFIED => 'LOG_RECORD_FLAG_UNSPECIFIED',
        self::LOG_RECORD_FLAG_TRACE_FLAGS_MASK => 'LOG_RECORD_FLAG_TRACE_FLAGS_MASK',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

