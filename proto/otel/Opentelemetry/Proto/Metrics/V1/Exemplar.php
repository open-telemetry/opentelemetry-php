<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: opentelemetry/proto/metrics/v1/metrics.proto

namespace Opentelemetry\Proto\Metrics\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A representation of an exemplar, which is a sample input measurement.
 * Exemplars also hold information about the environment when the measurement
 * was recorded, for example the span and trace ID of the active span when the
 * exemplar was recorded.
 *
 * Generated from protobuf message <code>opentelemetry.proto.metrics.v1.Exemplar</code>
 */
class Exemplar extends \Google\Protobuf\Internal\Message
{
    /**
     * The set of key/value pairs that were filtered out by the aggregator, but
     * recorded alongside the original measurement. Only key/value pairs that were
     * filtered out by the aggregator should be included
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;</code>
     */
    private $filtered_attributes;
    /**
     * time_unix_nano is the exact time when this exemplar was recorded
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     *
     * Generated from protobuf field <code>fixed64 time_unix_nano = 2;</code>
     */
    protected $time_unix_nano = 0;
    /**
     * (Optional) Span ID of the exemplar trace.
     * span_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     *
     * Generated from protobuf field <code>bytes span_id = 4;</code>
     */
    protected $span_id = '';
    /**
     * (Optional) Trace ID of the exemplar trace.
     * trace_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     *
     * Generated from protobuf field <code>bytes trace_id = 5;</code>
     */
    protected $trace_id = '';
    protected $value;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Opentelemetry\Proto\Common\V1\KeyValue[]|\Google\Protobuf\Internal\RepeatedField $filtered_attributes
     *           The set of key/value pairs that were filtered out by the aggregator, but
     *           recorded alongside the original measurement. Only key/value pairs that were
     *           filtered out by the aggregator should be included
     *     @type int|string $time_unix_nano
     *           time_unix_nano is the exact time when this exemplar was recorded
     *           Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     *           1970.
     *     @type float $as_double
     *     @type int|string $as_int
     *     @type string $span_id
     *           (Optional) Span ID of the exemplar trace.
     *           span_id may be missing if the measurement is not recorded inside a trace
     *           or if the trace is not sampled.
     *     @type string $trace_id
     *           (Optional) Trace ID of the exemplar trace.
     *           trace_id may be missing if the measurement is not recorded inside a trace
     *           or if the trace is not sampled.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Opentelemetry\Proto\Metrics\V1\Metrics::initOnce();
        parent::__construct($data);
    }

    /**
     * The set of key/value pairs that were filtered out by the aggregator, but
     * recorded alongside the original measurement. Only key/value pairs that were
     * filtered out by the aggregator should be included
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getFilteredAttributes()
    {
        return $this->filtered_attributes;
    }

    /**
     * The set of key/value pairs that were filtered out by the aggregator, but
     * recorded alongside the original measurement. Only key/value pairs that were
     * filtered out by the aggregator should be included
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;</code>
     * @param \Opentelemetry\Proto\Common\V1\KeyValue[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setFilteredAttributes($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Opentelemetry\Proto\Common\V1\KeyValue::class);
        $this->filtered_attributes = $arr;

        return $this;
    }

    /**
     * time_unix_nano is the exact time when this exemplar was recorded
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     *
     * Generated from protobuf field <code>fixed64 time_unix_nano = 2;</code>
     * @return int|string
     */
    public function getTimeUnixNano()
    {
        return $this->time_unix_nano;
    }

    /**
     * time_unix_nano is the exact time when this exemplar was recorded
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     *
     * Generated from protobuf field <code>fixed64 time_unix_nano = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTimeUnixNano($var)
    {
        GPBUtil::checkUint64($var);
        $this->time_unix_nano = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double as_double = 3;</code>
     * @return float
     */
    public function getAsDouble()
    {
        return $this->readOneof(3);
    }

    public function hasAsDouble()
    {
        return $this->hasOneof(3);
    }

    /**
     * Generated from protobuf field <code>double as_double = 3;</code>
     * @param float $var
     * @return $this
     */
    public function setAsDouble($var)
    {
        GPBUtil::checkDouble($var);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>sfixed64 as_int = 6;</code>
     * @return int|string
     */
    public function getAsInt()
    {
        return $this->readOneof(6);
    }

    public function hasAsInt()
    {
        return $this->hasOneof(6);
    }

    /**
     * Generated from protobuf field <code>sfixed64 as_int = 6;</code>
     * @param int|string $var
     * @return $this
     */
    public function setAsInt($var)
    {
        GPBUtil::checkInt64($var);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * (Optional) Span ID of the exemplar trace.
     * span_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     *
     * Generated from protobuf field <code>bytes span_id = 4;</code>
     * @return string
     */
    public function getSpanId()
    {
        return $this->span_id;
    }

    /**
     * (Optional) Span ID of the exemplar trace.
     * span_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     *
     * Generated from protobuf field <code>bytes span_id = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setSpanId($var)
    {
        GPBUtil::checkString($var, False);
        $this->span_id = $var;

        return $this;
    }

    /**
     * (Optional) Trace ID of the exemplar trace.
     * trace_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     *
     * Generated from protobuf field <code>bytes trace_id = 5;</code>
     * @return string
     */
    public function getTraceId()
    {
        return $this->trace_id;
    }

    /**
     * (Optional) Trace ID of the exemplar trace.
     * trace_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     *
     * Generated from protobuf field <code>bytes trace_id = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setTraceId($var)
    {
        GPBUtil::checkString($var, False);
        $this->trace_id = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getValue()
    {
        return $this->whichOneof("value");
    }

}

