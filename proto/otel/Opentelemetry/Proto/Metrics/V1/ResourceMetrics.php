<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: opentelemetry/proto/metrics/v1/metrics.proto

namespace Opentelemetry\Proto\Metrics\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A collection of ScopeMetrics from a Resource.
 *
 * Generated from protobuf message <code>opentelemetry.proto.metrics.v1.ResourceMetrics</code>
 */
class ResourceMetrics extends \Google\Protobuf\Internal\Message
{
    /**
     * The resource for the metrics in this message.
     * If this field is not set then no resource info is known.
     *
     * Generated from protobuf field <code>.opentelemetry.proto.resource.v1.Resource resource = 1;</code>
     */
    protected $resource = null;
    /**
     * A list of metrics that originate from a resource.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.metrics.v1.ScopeMetrics scope_metrics = 2;</code>
     */
    private $scope_metrics;
    /**
     * A list of InstrumentationLibraryMetrics that originate from a resource.
     * This field is deprecated and will be removed after grace period expires on June 15, 2022.
     * During the grace period the following rules SHOULD be followed:
     * For Binary Protobufs
     * ====================
     * Binary Protobuf senders SHOULD NOT set instrumentation_library_metrics. Instead
     * scope_metrics SHOULD be set.
     * Binary Protobuf receivers SHOULD check if instrumentation_library_metrics is set
     * and scope_metrics is not set then the value in instrumentation_library_metrics
     * SHOULD be used instead by converting InstrumentationLibraryMetrics into ScopeMetrics.
     * If scope_metrics is set then instrumentation_library_metrics SHOULD be ignored.
     * For JSON
     * ========
     * JSON senders that set instrumentation_library_metrics field MAY also set
     * scope_metrics to carry the same metrics, essentially double-publishing the same data.
     * Such double-publishing MAY be controlled by a user-settable option.
     * If double-publishing is not used then the senders SHOULD set scope_metrics and
     * SHOULD NOT set instrumentation_library_metrics.
     * JSON receivers SHOULD check if instrumentation_library_metrics is set and
     * scope_metrics is not set then the value in instrumentation_library_metrics
     * SHOULD be used instead by converting InstrumentationLibraryMetrics into ScopeMetrics.
     * If scope_metrics is set then instrumentation_library_metrics field SHOULD be ignored.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics instrumentation_library_metrics = 1000 [deprecated = true];</code>
     * @deprecated
     */
    private $instrumentation_library_metrics;
    /**
     * This schema_url applies to the data in the "resource" field. It does not apply
     * to the data in the "scope_metrics" field which have their own schema_url field.
     *
     * Generated from protobuf field <code>string schema_url = 3;</code>
     */
    protected $schema_url = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Opentelemetry\Proto\Resource\V1\Resource $resource
     *           The resource for the metrics in this message.
     *           If this field is not set then no resource info is known.
     *     @type \Opentelemetry\Proto\Metrics\V1\ScopeMetrics[]|\Google\Protobuf\Internal\RepeatedField $scope_metrics
     *           A list of metrics that originate from a resource.
     *     @type \Opentelemetry\Proto\Metrics\V1\InstrumentationLibraryMetrics[]|\Google\Protobuf\Internal\RepeatedField $instrumentation_library_metrics
     *           A list of InstrumentationLibraryMetrics that originate from a resource.
     *           This field is deprecated and will be removed after grace period expires on June 15, 2022.
     *           During the grace period the following rules SHOULD be followed:
     *           For Binary Protobufs
     *           ====================
     *           Binary Protobuf senders SHOULD NOT set instrumentation_library_metrics. Instead
     *           scope_metrics SHOULD be set.
     *           Binary Protobuf receivers SHOULD check if instrumentation_library_metrics is set
     *           and scope_metrics is not set then the value in instrumentation_library_metrics
     *           SHOULD be used instead by converting InstrumentationLibraryMetrics into ScopeMetrics.
     *           If scope_metrics is set then instrumentation_library_metrics SHOULD be ignored.
     *           For JSON
     *           ========
     *           JSON senders that set instrumentation_library_metrics field MAY also set
     *           scope_metrics to carry the same metrics, essentially double-publishing the same data.
     *           Such double-publishing MAY be controlled by a user-settable option.
     *           If double-publishing is not used then the senders SHOULD set scope_metrics and
     *           SHOULD NOT set instrumentation_library_metrics.
     *           JSON receivers SHOULD check if instrumentation_library_metrics is set and
     *           scope_metrics is not set then the value in instrumentation_library_metrics
     *           SHOULD be used instead by converting InstrumentationLibraryMetrics into ScopeMetrics.
     *           If scope_metrics is set then instrumentation_library_metrics field SHOULD be ignored.
     *     @type string $schema_url
     *           This schema_url applies to the data in the "resource" field. It does not apply
     *           to the data in the "scope_metrics" field which have their own schema_url field.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Opentelemetry\Proto\Metrics\V1\Metrics::initOnce();
        parent::__construct($data);
    }

    /**
     * The resource for the metrics in this message.
     * If this field is not set then no resource info is known.
     *
     * Generated from protobuf field <code>.opentelemetry.proto.resource.v1.Resource resource = 1;</code>
     * @return \Opentelemetry\Proto\Resource\V1\Resource|null
     */
    public function getResource()
    {
        return $this->resource;
    }

    public function hasResource()
    {
        return isset($this->resource);
    }

    public function clearResource()
    {
        unset($this->resource);
    }

    /**
     * The resource for the metrics in this message.
     * If this field is not set then no resource info is known.
     *
     * Generated from protobuf field <code>.opentelemetry.proto.resource.v1.Resource resource = 1;</code>
     * @param \Opentelemetry\Proto\Resource\V1\Resource $var
     * @return $this
     */
    public function setResource($var)
    {
        GPBUtil::checkMessage($var, \Opentelemetry\Proto\Resource\V1\Resource::class);
        $this->resource = $var;

        return $this;
    }

    /**
     * A list of metrics that originate from a resource.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.metrics.v1.ScopeMetrics scope_metrics = 2;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getScopeMetrics()
    {
        return $this->scope_metrics;
    }

    /**
     * A list of metrics that originate from a resource.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.metrics.v1.ScopeMetrics scope_metrics = 2;</code>
     * @param \Opentelemetry\Proto\Metrics\V1\ScopeMetrics[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setScopeMetrics($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Opentelemetry\Proto\Metrics\V1\ScopeMetrics::class);
        $this->scope_metrics = $arr;

        return $this;
    }

    /**
     * A list of InstrumentationLibraryMetrics that originate from a resource.
     * This field is deprecated and will be removed after grace period expires on June 15, 2022.
     * During the grace period the following rules SHOULD be followed:
     * For Binary Protobufs
     * ====================
     * Binary Protobuf senders SHOULD NOT set instrumentation_library_metrics. Instead
     * scope_metrics SHOULD be set.
     * Binary Protobuf receivers SHOULD check if instrumentation_library_metrics is set
     * and scope_metrics is not set then the value in instrumentation_library_metrics
     * SHOULD be used instead by converting InstrumentationLibraryMetrics into ScopeMetrics.
     * If scope_metrics is set then instrumentation_library_metrics SHOULD be ignored.
     * For JSON
     * ========
     * JSON senders that set instrumentation_library_metrics field MAY also set
     * scope_metrics to carry the same metrics, essentially double-publishing the same data.
     * Such double-publishing MAY be controlled by a user-settable option.
     * If double-publishing is not used then the senders SHOULD set scope_metrics and
     * SHOULD NOT set instrumentation_library_metrics.
     * JSON receivers SHOULD check if instrumentation_library_metrics is set and
     * scope_metrics is not set then the value in instrumentation_library_metrics
     * SHOULD be used instead by converting InstrumentationLibraryMetrics into ScopeMetrics.
     * If scope_metrics is set then instrumentation_library_metrics field SHOULD be ignored.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics instrumentation_library_metrics = 1000 [deprecated = true];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     * @deprecated
     */
    public function getInstrumentationLibraryMetrics()
    {
        @trigger_error('instrumentation_library_metrics is deprecated.', E_USER_DEPRECATED);
        return $this->instrumentation_library_metrics;
    }

    /**
     * A list of InstrumentationLibraryMetrics that originate from a resource.
     * This field is deprecated and will be removed after grace period expires on June 15, 2022.
     * During the grace period the following rules SHOULD be followed:
     * For Binary Protobufs
     * ====================
     * Binary Protobuf senders SHOULD NOT set instrumentation_library_metrics. Instead
     * scope_metrics SHOULD be set.
     * Binary Protobuf receivers SHOULD check if instrumentation_library_metrics is set
     * and scope_metrics is not set then the value in instrumentation_library_metrics
     * SHOULD be used instead by converting InstrumentationLibraryMetrics into ScopeMetrics.
     * If scope_metrics is set then instrumentation_library_metrics SHOULD be ignored.
     * For JSON
     * ========
     * JSON senders that set instrumentation_library_metrics field MAY also set
     * scope_metrics to carry the same metrics, essentially double-publishing the same data.
     * Such double-publishing MAY be controlled by a user-settable option.
     * If double-publishing is not used then the senders SHOULD set scope_metrics and
     * SHOULD NOT set instrumentation_library_metrics.
     * JSON receivers SHOULD check if instrumentation_library_metrics is set and
     * scope_metrics is not set then the value in instrumentation_library_metrics
     * SHOULD be used instead by converting InstrumentationLibraryMetrics into ScopeMetrics.
     * If scope_metrics is set then instrumentation_library_metrics field SHOULD be ignored.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics instrumentation_library_metrics = 1000 [deprecated = true];</code>
     * @param \Opentelemetry\Proto\Metrics\V1\InstrumentationLibraryMetrics[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     * @deprecated
     */
    public function setInstrumentationLibraryMetrics($var)
    {
        @trigger_error('instrumentation_library_metrics is deprecated.', E_USER_DEPRECATED);
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Opentelemetry\Proto\Metrics\V1\InstrumentationLibraryMetrics::class);
        $this->instrumentation_library_metrics = $arr;

        return $this;
    }

    /**
     * This schema_url applies to the data in the "resource" field. It does not apply
     * to the data in the "scope_metrics" field which have their own schema_url field.
     *
     * Generated from protobuf field <code>string schema_url = 3;</code>
     * @return string
     */
    public function getSchemaUrl()
    {
        return $this->schema_url;
    }

    /**
     * This schema_url applies to the data in the "resource" field. It does not apply
     * to the data in the "scope_metrics" field which have their own schema_url field.
     *
     * Generated from protobuf field <code>string schema_url = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setSchemaUrl($var)
    {
        GPBUtil::checkString($var, True);
        $this->schema_url = $var;

        return $this;
    }

}

