<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: opentelemetry/proto/profiles/v1development/profiles.proto

namespace Opentelemetry\Proto\Profiles\V1development;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Represents a complete profile, including sample types, samples,
 * mappings to binaries, locations, functions, string table, and additional metadata.
 * It modifies and annotates pprof Profile with OpenTelemetry specific fields.
 * Note that whilst fields in this message retain the name and field id from pprof in most cases
 * for ease of understanding data migration, it is not intended that pprof:Profile and
 * OpenTelemetry:Profile encoding be wire compatible.
 *
 * Generated from protobuf message <code>opentelemetry.proto.profiles.v1development.Profile</code>
 */
class Profile extends \Google\Protobuf\Internal\Message
{
    /**
     * A description of the samples associated with each Sample.value.
     * For a cpu profile this might be:
     *   [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
     * For a heap profile, this might be:
     *   [["allocations","count"], ["space","bytes"]],
     * If one of the values represents the number of events represented
     * by the sample, by convention it should be at index 0 and use
     * sample_type.unit == "count".
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.ValueType sample_type = 1;</code>
     */
    private $sample_type;
    /**
     * The set of samples recorded in this profile.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.Sample sample = 2;</code>
     */
    private $sample;
    /**
     * Mapping from address ranges to the image/binary/library mapped
     * into that address range.  mapping[0] will be the main binary.
     * If multiple binaries contribute to the Profile and no main
     * binary can be identified, mapping[0] has no special meaning.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.Mapping mapping_table = 3;</code>
     */
    private $mapping_table;
    /**
     * Locations referenced by samples via location_indices.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.Location location_table = 4;</code>
     */
    private $location_table;
    /**
     * Array of locations referenced by samples.
     *
     * Generated from protobuf field <code>repeated int32 location_indices = 5;</code>
     */
    private $location_indices;
    /**
     * Functions referenced by locations.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.Function function_table = 6;</code>
     */
    private $function_table;
    /**
     * Lookup table for attributes.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.common.v1.KeyValue attribute_table = 7;</code>
     */
    private $attribute_table;
    /**
     * Represents a mapping between Attribute Keys and Units.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.AttributeUnit attribute_units = 8;</code>
     */
    private $attribute_units;
    /**
     * Lookup table for links.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.Link link_table = 9;</code>
     */
    private $link_table;
    /**
     * A common table for strings referenced by various messages.
     * string_table[0] must always be "".
     *
     * Generated from protobuf field <code>repeated string string_table = 10;</code>
     */
    private $string_table;
    /**
     * Time of collection (UTC) represented as nanoseconds past the epoch.
     *
     * Generated from protobuf field <code>int64 time_nanos = 11;</code>
     */
    protected $time_nanos = 0;
    /**
     * Duration of the profile, if a duration makes sense.
     *
     * Generated from protobuf field <code>int64 duration_nanos = 12;</code>
     */
    protected $duration_nanos = 0;
    /**
     * The kind of events between sampled occurrences.
     * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
     *
     * Generated from protobuf field <code>.opentelemetry.proto.profiles.v1development.ValueType period_type = 13;</code>
     */
    protected $period_type = null;
    /**
     * The number of events between sampled occurrences.
     *
     * Generated from protobuf field <code>int64 period = 14;</code>
     */
    protected $period = 0;
    /**
     * Free-form text associated with the profile. The text is displayed as is
     * to the user by the tools that read profiles (e.g. by pprof). This field
     * should not be used to store any machine-readable information, it is only
     * for human-friendly content. The profile must stay functional if this field
     * is cleaned.
     *
     * Generated from protobuf field <code>repeated int32 comment_strindices = 15;</code>
     */
    private $comment_strindices;
    /**
     * Index into the string table of the type of the preferred sample
     * value. If unset, clients should default to the last sample value.
     *
     * Generated from protobuf field <code>int32 default_sample_type_strindex = 16;</code>
     */
    protected $default_sample_type_strindex = 0;
    /**
     * A globally unique identifier for a profile. The ID is a 16-byte array. An ID with
     * all zeroes is considered invalid.
     * This field is required.
     *
     * Generated from protobuf field <code>bytes profile_id = 17;</code>
     */
    protected $profile_id = '';
    /**
     * dropped_attributes_count is the number of attributes that were discarded. Attributes
     * can be discarded because their keys are too long or because there are too many
     * attributes. If this value is 0, then no attributes were dropped.
     *
     * Generated from protobuf field <code>uint32 dropped_attributes_count = 19;</code>
     */
    protected $dropped_attributes_count = 0;
    /**
     * Specifies format of the original payload. Common values are defined in semantic conventions. [required if original_payload is present]
     *
     * Generated from protobuf field <code>string original_payload_format = 20;</code>
     */
    protected $original_payload_format = '';
    /**
     * Original payload can be stored in this field. This can be useful for users who want to get the original payload.
     * Formats such as JFR are highly extensible and can contain more information than what is defined in this spec.
     * Inclusion of original payload should be configurable by the user. Default behavior should be to not include the original payload.
     * If the original payload is in pprof format, it SHOULD not be included in this field.
     * The field is optional, however if it is present then equivalent converted data should be populated in other fields
     * of this message as far as is practicable.
     *
     * Generated from protobuf field <code>bytes original_payload = 21;</code>
     */
    protected $original_payload = '';
    /**
     * References to attributes in attribute_table. [optional]
     * It is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     *
     * Generated from protobuf field <code>repeated int32 attribute_indices = 22;</code>
     */
    private $attribute_indices;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Opentelemetry\Proto\Profiles\V1development\ValueType[]|\Google\Protobuf\Internal\RepeatedField $sample_type
     *           A description of the samples associated with each Sample.value.
     *           For a cpu profile this might be:
     *             [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
     *           For a heap profile, this might be:
     *             [["allocations","count"], ["space","bytes"]],
     *           If one of the values represents the number of events represented
     *           by the sample, by convention it should be at index 0 and use
     *           sample_type.unit == "count".
     *     @type \Opentelemetry\Proto\Profiles\V1development\Sample[]|\Google\Protobuf\Internal\RepeatedField $sample
     *           The set of samples recorded in this profile.
     *     @type \Opentelemetry\Proto\Profiles\V1development\Mapping[]|\Google\Protobuf\Internal\RepeatedField $mapping_table
     *           Mapping from address ranges to the image/binary/library mapped
     *           into that address range.  mapping[0] will be the main binary.
     *           If multiple binaries contribute to the Profile and no main
     *           binary can be identified, mapping[0] has no special meaning.
     *     @type \Opentelemetry\Proto\Profiles\V1development\Location[]|\Google\Protobuf\Internal\RepeatedField $location_table
     *           Locations referenced by samples via location_indices.
     *     @type int[]|\Google\Protobuf\Internal\RepeatedField $location_indices
     *           Array of locations referenced by samples.
     *     @type \Opentelemetry\Proto\Profiles\V1development\PBFunction[]|\Google\Protobuf\Internal\RepeatedField $function_table
     *           Functions referenced by locations.
     *     @type \Opentelemetry\Proto\Common\V1\KeyValue[]|\Google\Protobuf\Internal\RepeatedField $attribute_table
     *           Lookup table for attributes.
     *     @type \Opentelemetry\Proto\Profiles\V1development\AttributeUnit[]|\Google\Protobuf\Internal\RepeatedField $attribute_units
     *           Represents a mapping between Attribute Keys and Units.
     *     @type \Opentelemetry\Proto\Profiles\V1development\Link[]|\Google\Protobuf\Internal\RepeatedField $link_table
     *           Lookup table for links.
     *     @type string[]|\Google\Protobuf\Internal\RepeatedField $string_table
     *           A common table for strings referenced by various messages.
     *           string_table[0] must always be "".
     *     @type int|string $time_nanos
     *           Time of collection (UTC) represented as nanoseconds past the epoch.
     *     @type int|string $duration_nanos
     *           Duration of the profile, if a duration makes sense.
     *     @type \Opentelemetry\Proto\Profiles\V1development\ValueType $period_type
     *           The kind of events between sampled occurrences.
     *           e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
     *     @type int|string $period
     *           The number of events between sampled occurrences.
     *     @type int[]|\Google\Protobuf\Internal\RepeatedField $comment_strindices
     *           Free-form text associated with the profile. The text is displayed as is
     *           to the user by the tools that read profiles (e.g. by pprof). This field
     *           should not be used to store any machine-readable information, it is only
     *           for human-friendly content. The profile must stay functional if this field
     *           is cleaned.
     *     @type int $default_sample_type_strindex
     *           Index into the string table of the type of the preferred sample
     *           value. If unset, clients should default to the last sample value.
     *     @type string $profile_id
     *           A globally unique identifier for a profile. The ID is a 16-byte array. An ID with
     *           all zeroes is considered invalid.
     *           This field is required.
     *     @type int $dropped_attributes_count
     *           dropped_attributes_count is the number of attributes that were discarded. Attributes
     *           can be discarded because their keys are too long or because there are too many
     *           attributes. If this value is 0, then no attributes were dropped.
     *     @type string $original_payload_format
     *           Specifies format of the original payload. Common values are defined in semantic conventions. [required if original_payload is present]
     *     @type string $original_payload
     *           Original payload can be stored in this field. This can be useful for users who want to get the original payload.
     *           Formats such as JFR are highly extensible and can contain more information than what is defined in this spec.
     *           Inclusion of original payload should be configurable by the user. Default behavior should be to not include the original payload.
     *           If the original payload is in pprof format, it SHOULD not be included in this field.
     *           The field is optional, however if it is present then equivalent converted data should be populated in other fields
     *           of this message as far as is practicable.
     *     @type int[]|\Google\Protobuf\Internal\RepeatedField $attribute_indices
     *           References to attributes in attribute_table. [optional]
     *           It is a collection of key/value pairs. Note, global attributes
     *           like server name can be set using the resource API. Examples of attributes:
     *               "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *               "/http/server_latency": 300
     *               "abc.com/myattribute": true
     *               "abc.com/score": 10.239
     *           The OpenTelemetry API specification further restricts the allowed value types:
     *           https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     *           Attribute keys MUST be unique (it is not allowed to have more than one
     *           attribute with the same key).
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Opentelemetry\Proto\Profiles\V1Development\Profiles::initOnce();
        parent::__construct($data);
    }

    /**
     * A description of the samples associated with each Sample.value.
     * For a cpu profile this might be:
     *   [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
     * For a heap profile, this might be:
     *   [["allocations","count"], ["space","bytes"]],
     * If one of the values represents the number of events represented
     * by the sample, by convention it should be at index 0 and use
     * sample_type.unit == "count".
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.ValueType sample_type = 1;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getSampleType()
    {
        return $this->sample_type;
    }

    /**
     * A description of the samples associated with each Sample.value.
     * For a cpu profile this might be:
     *   [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
     * For a heap profile, this might be:
     *   [["allocations","count"], ["space","bytes"]],
     * If one of the values represents the number of events represented
     * by the sample, by convention it should be at index 0 and use
     * sample_type.unit == "count".
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.ValueType sample_type = 1;</code>
     * @param \Opentelemetry\Proto\Profiles\V1development\ValueType[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setSampleType($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Opentelemetry\Proto\Profiles\V1development\ValueType::class);
        $this->sample_type = $arr;

        return $this;
    }

    /**
     * The set of samples recorded in this profile.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.Sample sample = 2;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getSample()
    {
        return $this->sample;
    }

    /**
     * The set of samples recorded in this profile.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.Sample sample = 2;</code>
     * @param \Opentelemetry\Proto\Profiles\V1development\Sample[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setSample($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Opentelemetry\Proto\Profiles\V1development\Sample::class);
        $this->sample = $arr;

        return $this;
    }

    /**
     * Mapping from address ranges to the image/binary/library mapped
     * into that address range.  mapping[0] will be the main binary.
     * If multiple binaries contribute to the Profile and no main
     * binary can be identified, mapping[0] has no special meaning.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.Mapping mapping_table = 3;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getMappingTable()
    {
        return $this->mapping_table;
    }

    /**
     * Mapping from address ranges to the image/binary/library mapped
     * into that address range.  mapping[0] will be the main binary.
     * If multiple binaries contribute to the Profile and no main
     * binary can be identified, mapping[0] has no special meaning.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.Mapping mapping_table = 3;</code>
     * @param \Opentelemetry\Proto\Profiles\V1development\Mapping[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setMappingTable($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Opentelemetry\Proto\Profiles\V1development\Mapping::class);
        $this->mapping_table = $arr;

        return $this;
    }

    /**
     * Locations referenced by samples via location_indices.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.Location location_table = 4;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getLocationTable()
    {
        return $this->location_table;
    }

    /**
     * Locations referenced by samples via location_indices.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.Location location_table = 4;</code>
     * @param \Opentelemetry\Proto\Profiles\V1development\Location[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setLocationTable($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Opentelemetry\Proto\Profiles\V1development\Location::class);
        $this->location_table = $arr;

        return $this;
    }

    /**
     * Array of locations referenced by samples.
     *
     * Generated from protobuf field <code>repeated int32 location_indices = 5;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getLocationIndices()
    {
        return $this->location_indices;
    }

    /**
     * Array of locations referenced by samples.
     *
     * Generated from protobuf field <code>repeated int32 location_indices = 5;</code>
     * @param int[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setLocationIndices($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT32);
        $this->location_indices = $arr;

        return $this;
    }

    /**
     * Functions referenced by locations.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.Function function_table = 6;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getFunctionTable()
    {
        return $this->function_table;
    }

    /**
     * Functions referenced by locations.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.Function function_table = 6;</code>
     * @param \Opentelemetry\Proto\Profiles\V1development\PBFunction[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setFunctionTable($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Opentelemetry\Proto\Profiles\V1development\PBFunction::class);
        $this->function_table = $arr;

        return $this;
    }

    /**
     * Lookup table for attributes.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.common.v1.KeyValue attribute_table = 7;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getAttributeTable()
    {
        return $this->attribute_table;
    }

    /**
     * Lookup table for attributes.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.common.v1.KeyValue attribute_table = 7;</code>
     * @param \Opentelemetry\Proto\Common\V1\KeyValue[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setAttributeTable($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Opentelemetry\Proto\Common\V1\KeyValue::class);
        $this->attribute_table = $arr;

        return $this;
    }

    /**
     * Represents a mapping between Attribute Keys and Units.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.AttributeUnit attribute_units = 8;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getAttributeUnits()
    {
        return $this->attribute_units;
    }

    /**
     * Represents a mapping between Attribute Keys and Units.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.AttributeUnit attribute_units = 8;</code>
     * @param \Opentelemetry\Proto\Profiles\V1development\AttributeUnit[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setAttributeUnits($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Opentelemetry\Proto\Profiles\V1development\AttributeUnit::class);
        $this->attribute_units = $arr;

        return $this;
    }

    /**
     * Lookup table for links.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.Link link_table = 9;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getLinkTable()
    {
        return $this->link_table;
    }

    /**
     * Lookup table for links.
     *
     * Generated from protobuf field <code>repeated .opentelemetry.proto.profiles.v1development.Link link_table = 9;</code>
     * @param \Opentelemetry\Proto\Profiles\V1development\Link[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setLinkTable($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Opentelemetry\Proto\Profiles\V1development\Link::class);
        $this->link_table = $arr;

        return $this;
    }

    /**
     * A common table for strings referenced by various messages.
     * string_table[0] must always be "".
     *
     * Generated from protobuf field <code>repeated string string_table = 10;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getStringTable()
    {
        return $this->string_table;
    }

    /**
     * A common table for strings referenced by various messages.
     * string_table[0] must always be "".
     *
     * Generated from protobuf field <code>repeated string string_table = 10;</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setStringTable($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->string_table = $arr;

        return $this;
    }

    /**
     * Time of collection (UTC) represented as nanoseconds past the epoch.
     *
     * Generated from protobuf field <code>int64 time_nanos = 11;</code>
     * @return int|string
     */
    public function getTimeNanos()
    {
        return $this->time_nanos;
    }

    /**
     * Time of collection (UTC) represented as nanoseconds past the epoch.
     *
     * Generated from protobuf field <code>int64 time_nanos = 11;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTimeNanos($var)
    {
        GPBUtil::checkInt64($var);
        $this->time_nanos = $var;

        return $this;
    }

    /**
     * Duration of the profile, if a duration makes sense.
     *
     * Generated from protobuf field <code>int64 duration_nanos = 12;</code>
     * @return int|string
     */
    public function getDurationNanos()
    {
        return $this->duration_nanos;
    }

    /**
     * Duration of the profile, if a duration makes sense.
     *
     * Generated from protobuf field <code>int64 duration_nanos = 12;</code>
     * @param int|string $var
     * @return $this
     */
    public function setDurationNanos($var)
    {
        GPBUtil::checkInt64($var);
        $this->duration_nanos = $var;

        return $this;
    }

    /**
     * The kind of events between sampled occurrences.
     * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
     *
     * Generated from protobuf field <code>.opentelemetry.proto.profiles.v1development.ValueType period_type = 13;</code>
     * @return \Opentelemetry\Proto\Profiles\V1development\ValueType|null
     */
    public function getPeriodType()
    {
        return $this->period_type;
    }

    public function hasPeriodType()
    {
        return isset($this->period_type);
    }

    public function clearPeriodType()
    {
        unset($this->period_type);
    }

    /**
     * The kind of events between sampled occurrences.
     * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
     *
     * Generated from protobuf field <code>.opentelemetry.proto.profiles.v1development.ValueType period_type = 13;</code>
     * @param \Opentelemetry\Proto\Profiles\V1development\ValueType $var
     * @return $this
     */
    public function setPeriodType($var)
    {
        GPBUtil::checkMessage($var, \Opentelemetry\Proto\Profiles\V1development\ValueType::class);
        $this->period_type = $var;

        return $this;
    }

    /**
     * The number of events between sampled occurrences.
     *
     * Generated from protobuf field <code>int64 period = 14;</code>
     * @return int|string
     */
    public function getPeriod()
    {
        return $this->period;
    }

    /**
     * The number of events between sampled occurrences.
     *
     * Generated from protobuf field <code>int64 period = 14;</code>
     * @param int|string $var
     * @return $this
     */
    public function setPeriod($var)
    {
        GPBUtil::checkInt64($var);
        $this->period = $var;

        return $this;
    }

    /**
     * Free-form text associated with the profile. The text is displayed as is
     * to the user by the tools that read profiles (e.g. by pprof). This field
     * should not be used to store any machine-readable information, it is only
     * for human-friendly content. The profile must stay functional if this field
     * is cleaned.
     *
     * Generated from protobuf field <code>repeated int32 comment_strindices = 15;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getCommentStrindices()
    {
        return $this->comment_strindices;
    }

    /**
     * Free-form text associated with the profile. The text is displayed as is
     * to the user by the tools that read profiles (e.g. by pprof). This field
     * should not be used to store any machine-readable information, it is only
     * for human-friendly content. The profile must stay functional if this field
     * is cleaned.
     *
     * Generated from protobuf field <code>repeated int32 comment_strindices = 15;</code>
     * @param int[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setCommentStrindices($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT32);
        $this->comment_strindices = $arr;

        return $this;
    }

    /**
     * Index into the string table of the type of the preferred sample
     * value. If unset, clients should default to the last sample value.
     *
     * Generated from protobuf field <code>int32 default_sample_type_strindex = 16;</code>
     * @return int
     */
    public function getDefaultSampleTypeStrindex()
    {
        return $this->default_sample_type_strindex;
    }

    /**
     * Index into the string table of the type of the preferred sample
     * value. If unset, clients should default to the last sample value.
     *
     * Generated from protobuf field <code>int32 default_sample_type_strindex = 16;</code>
     * @param int $var
     * @return $this
     */
    public function setDefaultSampleTypeStrindex($var)
    {
        GPBUtil::checkInt32($var);
        $this->default_sample_type_strindex = $var;

        return $this;
    }

    /**
     * A globally unique identifier for a profile. The ID is a 16-byte array. An ID with
     * all zeroes is considered invalid.
     * This field is required.
     *
     * Generated from protobuf field <code>bytes profile_id = 17;</code>
     * @return string
     */
    public function getProfileId()
    {
        return $this->profile_id;
    }

    /**
     * A globally unique identifier for a profile. The ID is a 16-byte array. An ID with
     * all zeroes is considered invalid.
     * This field is required.
     *
     * Generated from protobuf field <code>bytes profile_id = 17;</code>
     * @param string $var
     * @return $this
     */
    public function setProfileId($var)
    {
        GPBUtil::checkString($var, False);
        $this->profile_id = $var;

        return $this;
    }

    /**
     * dropped_attributes_count is the number of attributes that were discarded. Attributes
     * can be discarded because their keys are too long or because there are too many
     * attributes. If this value is 0, then no attributes were dropped.
     *
     * Generated from protobuf field <code>uint32 dropped_attributes_count = 19;</code>
     * @return int
     */
    public function getDroppedAttributesCount()
    {
        return $this->dropped_attributes_count;
    }

    /**
     * dropped_attributes_count is the number of attributes that were discarded. Attributes
     * can be discarded because their keys are too long or because there are too many
     * attributes. If this value is 0, then no attributes were dropped.
     *
     * Generated from protobuf field <code>uint32 dropped_attributes_count = 19;</code>
     * @param int $var
     * @return $this
     */
    public function setDroppedAttributesCount($var)
    {
        GPBUtil::checkUint32($var);
        $this->dropped_attributes_count = $var;

        return $this;
    }

    /**
     * Specifies format of the original payload. Common values are defined in semantic conventions. [required if original_payload is present]
     *
     * Generated from protobuf field <code>string original_payload_format = 20;</code>
     * @return string
     */
    public function getOriginalPayloadFormat()
    {
        return $this->original_payload_format;
    }

    /**
     * Specifies format of the original payload. Common values are defined in semantic conventions. [required if original_payload is present]
     *
     * Generated from protobuf field <code>string original_payload_format = 20;</code>
     * @param string $var
     * @return $this
     */
    public function setOriginalPayloadFormat($var)
    {
        GPBUtil::checkString($var, True);
        $this->original_payload_format = $var;

        return $this;
    }

    /**
     * Original payload can be stored in this field. This can be useful for users who want to get the original payload.
     * Formats such as JFR are highly extensible and can contain more information than what is defined in this spec.
     * Inclusion of original payload should be configurable by the user. Default behavior should be to not include the original payload.
     * If the original payload is in pprof format, it SHOULD not be included in this field.
     * The field is optional, however if it is present then equivalent converted data should be populated in other fields
     * of this message as far as is practicable.
     *
     * Generated from protobuf field <code>bytes original_payload = 21;</code>
     * @return string
     */
    public function getOriginalPayload()
    {
        return $this->original_payload;
    }

    /**
     * Original payload can be stored in this field. This can be useful for users who want to get the original payload.
     * Formats such as JFR are highly extensible and can contain more information than what is defined in this spec.
     * Inclusion of original payload should be configurable by the user. Default behavior should be to not include the original payload.
     * If the original payload is in pprof format, it SHOULD not be included in this field.
     * The field is optional, however if it is present then equivalent converted data should be populated in other fields
     * of this message as far as is practicable.
     *
     * Generated from protobuf field <code>bytes original_payload = 21;</code>
     * @param string $var
     * @return $this
     */
    public function setOriginalPayload($var)
    {
        GPBUtil::checkString($var, False);
        $this->original_payload = $var;

        return $this;
    }

    /**
     * References to attributes in attribute_table. [optional]
     * It is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     *
     * Generated from protobuf field <code>repeated int32 attribute_indices = 22;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getAttributeIndices()
    {
        return $this->attribute_indices;
    }

    /**
     * References to attributes in attribute_table. [optional]
     * It is a collection of key/value pairs. Note, global attributes
     * like server name can be set using the resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * The OpenTelemetry API specification further restricts the allowed value types:
     * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     *
     * Generated from protobuf field <code>repeated int32 attribute_indices = 22;</code>
     * @param int[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setAttributeIndices($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT32);
        $this->attribute_indices = $arr;

        return $this;
    }

}

